@startuml

title  Documentazione UML
'top to bottom direction
left to right direction

package GeometryLibrary <<Folder>>
{
class Triangle{
+ Vertices : Matrix3d
+ Triangle(Vertices : Matrix3d)
+ double ComputeArea()
}

class Plane{
+ Normal : Vector3d
+ d: double
+ Plane()
+ Plane(Normal, d)
}

class PolygonalMesh{
+ NumberCell0D: unsigned int
+ Cell0ID: vector<unsigned int>
+ Cell0DCoordinates: vector<Vector3d>
+ NumberCell1D: unsigned int
+ Cell1DId: vector<unsigned int>
+ Cell1DVertices: vector<Vector2i>
+ NumberCell2D: unsigned int
+ Cell2DId: vector<unsigned int>
+ Cell2DVertices: vector<vector<unsigned int>>
+ Cell2DEdges: vector<vector<unsigned int>>
}

}

DFNLibrary --> GeometryLibrary : uses 
' Left, right, up, down to try to orient classes in the space based on their relationship

package DFNLibrary <<Folder>>
{
class Traces{
+ TraceIDFractures : vector<array<unsigned int,2>>
+ TraceCoordinates: vector<MatrixXd>
+ TraceLength: vector<double>
.. Non member function ..
void computeTraces(Fractures, Traces, double)
void computePolygonalMesh(Fractures, Traces, double)
void computeTracesSquaredLength(Traces)
void exportTraces(Traces)
}

class Fractures{
+ FractVertices: vector<MatrixXd>
+ listTraces: vector<map<bool,vector<unsigned int>>>
+ FractPlanes: vector<Plane>
+ FractMeanPoint: vector<Vector3d>
+ FractMesh: vector<PolygonalMesh>
.. Non member function ..
bool importFractureList(string, Fractures)
void computeTraces(Fractures, Traces, double)
void computePolygonalMesh(Fractures, Traces, double)
bool printFractureMesh(string, Fractures);
void cut(PolygonalMesh, vector<Vector3d>, vector<unsigned int>, vector<int>, vector<unsigned int>, int, double, bool);
void exportFunctions(string, Fractures)
.. TESTFRACTURES ..
TestMesh
TestImportAndCompute
}


}
@enduml
